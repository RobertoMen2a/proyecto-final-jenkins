pipeline {
    agent none
     parameters{
        string defaultValue: 'debian', description: 'Nombre del Nodo del ambiente de Desarrollo (DEV), ', name: 'LABEL_DEV_NODE', trim: false
        string defaultValue: 'container_qa', description: 'Nombre del Nodo  del ambiente QA, ', name: 'LABEL_QA_NODE', trim: false        
        string defaultValue: 'master', description: 'Nombre del NODO del ambiente PRODUCCION, ', name: 'LABEL_PROD_NODE', trim: false
     }

    environment{
        DEV_NODE="${params.LABEL_DEV_NODE}"
        QA_NODE="${params.LABEL_QA_NODE}"
        PROD_NODE="${params.LABEL_PROD_NODE}"
    }

    stages{
        stage("Clone Repository"){
            agent { label DEV_NODE }
            steps{
                git branch: 'main', url: 'https://github.com/RobertoMen2a/proyecto-final-vue.git'
                sh "echo Repositorio Clonado en DEV!"
                sh "pwd"
                sh "docker build -t proyecto_vue/final:v1 ."
                sh "dir"
            }
        }
        stage("Preparando Docker image"){
            agent { label DEV_NODE }
            steps{                
                sh "echo Preparando Docker image"
                sh "docker build -t proyecto_vue/final:v1 ."
                sh "docker save -o construyeya.tar proyecto_vue/final:v1"
                stash name: "stash-artifact", includes: "construyeya.tar"
                archiveArtifacts 'construyeya.tar'
                sh "echo Imagen creada"
            }
        }
        stage("Deployment on QA environment"){
            agent { label QA_NODE }
            steps{
                sh "echo Entorno QA"
                unstash "stash-artifact"
                sh "docker load -i construyeya.tar"
                sh "docker rm construyeya -f || true"
                // sh "docker run -idt -p 8081:80 --name construyeya proyecto_vue/final:v1 /bin/bash -c 'service mysql start; service apache2 start; mysql -h localhost --user='root' --password='123456' < db_sistema_mas_datos.sql; bash'"
                sh "docker-compose up -d"
                sh "echo QA publicado"
                
            }
        }
        stage("Run Automation tests"){
            agent { label QA_NODE}
            steps {
                //sh "docker rm browser -f || true"
                //sh "docker run -d -p 4444:4444 --name browser --link tiendav1 selenium/standalone-chrome"
                //sh "docker run -d -p 4444:4444 -p 5995:5900 -e VNC_NO_PASSWORD=1 --name browser --link tiendav1 selenium/standalone-chrome-debug:3.141.59-titanium || true"
                //sh "docker container start tiendav1 || true"
                //sh "mvn test"
                sh "echo TEST QA"
                sh "curl http://localhost:80"
            }

         }
        //  stage("Generate Automation report"){
        //     agent{label QA_NODE}
        //     steps{
        //         cucumber buildStatus: 'UNSTABLE',
        //         fileIncludePattern: 'target/*.json',
        //         trendsLimit: 10,
        //         classifications: [
        //             [
        //                 'key': 'Browser',
        //                 'value': 'Chrome'
        //             ]
        //         ]
        //     }
        // }
        stage("Deploy in PROD environment"){
            agent { label PROD_NODE}
            steps {
                sh "echo Despliegue en PROD"
                // sh "ansible-playbook playbook.yml"
                // sh "echo 'DONE..'"
                sh "docker-compose up -d"
            }

        }
    }

}
